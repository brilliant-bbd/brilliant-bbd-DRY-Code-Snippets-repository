name: Terraform Deploy

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggering

env:
  AWS_REGION: af-south-1
  TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
  TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
  TF_VAR_flyway_username: ${{ secrets.FLYWAY_USERNAME }}
  TF_VAR_flyway_password: ${{ secrets.FLYWAY_PASSWORD }}

jobs:
  terraform:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: af-south-1
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.0.1
        terraform_wrapper: false
    
    - name: Create backend.tfvars
      run: |
        cat > terraform/environments/dev/backend.tfvars << EOF
        bucket         = "${{ secrets.TERRAFORM_STATE_BUCKET }}"
        key            = "dev/terraform.tfstate"
        region         = "af-south-1"
        encrypt        = true
        dynamodb_table = "terraform-locks"
        EOF
    
    - name: Create terraform.tfvars
      run: |
        cat > terraform/environments/prod/terraform.tfvars << EOF
        aws_region     = "af-south-1"
        project_name   = "${{ vars.PROJECT_NAME }}"
        vpc_cidr       = "${{ vars.VPC_CIDR }}"
        db_identifier  = "${{ vars.DB_IDENTIFIER }}"
        db_name        = "${{ vars.DB_NAME }}"
        db_username    = "${{ secrets.DB_USERNAME }}"
        db_password    = "${{ secrets.DB_PASSWORD }}"
        db_instance_class = "${{ vars.DB_INSTANCE_CLASS }}"
        db_engine_version = "${{ vars.DB_ENGINE_VERSION }}"
        allocated_storage = ${{ vars.ALLOCATED_STORAGE }}
        db_multi_az    = false
        db_skip_final_snapshot = true
        required_subnet_count = 2
        eb_solution_stack_name = "${{ vars.EB_SOLUTION_STACK }}"
        eb_instance_type       = "t3.micro"
        eb_min_instances       = 1
        eb_max_instances       = 2
        environment            = "dev"
        EOF
    
    - name: Initialize Backend
      run: make init-backend
    
    - name: Debug backend config
      run: |
        echo "Bucket name length: ${#AWS_BUCKET_NAME}"
        echo "Backend config file:"
        cat terraform/environments/dev/backend.tfvars
      env:
        AWS_BUCKET_NAME: ${{ secrets.TERRAFORM_STATE_BUCKET }}
    
    - name: Apply Backend
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: make apply-backend -auto-approve
    
    - name: Initialize Environment
      run: make init-env
    
    - name: Plan Environment
      run: make plan-env
      
    - name: Apply Environment
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: make apply-env -auto-approve
      
    - name: Export Terraform Outputs
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      id: terraform_outputs
      run: |
        cd terraform/environments/dev
        echo "db_host=$(terraform output -raw db_host)" >> $GITHUB_OUTPUT
    
  flyway:
    needs: terraform
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker
      uses: docker/setup-buildx-action@v3
    
    - name: Debug DB Host
      run: |
        echo "Using database host: ${{ needs.terraform.outputs.db_host }}"
    
    - name: Run Flyway Migration with Docker
      working-directory: ./flyway
      run: |
        # Create a volume to mount migration scripts
        mkdir -p migration
        
        # Copy migration scripts from the repository
        cp -r ./sql/* migration/
        
        docker run --rm \
          -v ${{ github.workspace }}/migration:/flyway/sql \
          flyway/flyway:10 \
          -url=jdbc:postgresql://${{ needs.terraform.outputs.db_host }}:5432/snippets \
          -user=${{ secrets.FLYWAY_USERNAME }} \
          -password=${{ secrets.FLYWAY_PASSWORD }} \
          migrate