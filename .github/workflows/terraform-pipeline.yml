name: üöÄ Infrastructure Deployment
 
on:
  push:
    branches: [ main, peo/terrafrom-setup]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
 
permissions:
  id-token: write
  contents: read
 
jobs:
  check_backend:
    name: üîç Check Terraform Backend
    runs-on: ubuntu-latest
    environment: prod
    outputs:
      create_backend: ${{ steps.check_backend.outputs.create_backend }}
   
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
 
    - name: üîê Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: af-south-1
 
   
   
    # - name: üîç Check if backend exists
    #   id: check_backend
    #   run: |
    #     # Check if S3 bucket exists
    #     if aws s3api head-bucket --bucket ${{ secrets.TERRAFORM_STATE_BUCKET }} 2>/dev/null; then
    #       echo "s3_bucket_exists=true ‚úÖ" >> $GITHUB_OUTPUT
    #     else
    #       echo "s3_bucket_exists=false ‚ùå" >> $GITHUB_OUTPUT
    #     fi
       
    #     # Check if DynamoDB table exists
    #     if aws dynamodb describe-table --table-name ${{ secrets.TERRAFORM_LOCK_TABLE }} 2>/dev/null; then
    #       echo "dynamodb_table_exists=true ‚úÖ" >> $GITHUB_OUTPUT
    #     else
    #       echo "dynamodb_table_exists=false ‚ùå" >> $GITHUB_OUTPUT
    #     fi
       
    #     # Set create_backend flag only if BOTH resources don't exist
    #     if [[ $(aws s3api head-bucket --bucket ${{ secrets.TERRAFORM_STATE_BUCKET }} 2>/dev/null; echo $?) -ne 0 ]] || [[ $(aws dynamodb describe-table --table-name ${{ secrets.TERRAFORM_LOCK_TABLE }} 2>/dev/null; echo $?) -ne 0 ]]; then
    #       echo "create_backend=true" >> $GITHUB_OUTPUT
    #     else
    #       echo "create_backend=false" >> $GITHUB_OUTPUT
    #     fi
 
  setup_backend:
    name:  üèóÔ∏è Setup Terraform Backend
    needs: check_backend
    runs-on: ubuntu-latest
    environment: prod
   
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
 
    - name: ‚öôÔ∏è Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.11.2
 
    - name: üîê Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: af-south-1
 
    - name: ‚öôÔ∏è Terraform Backend Init & Apply (Backend)
      run: |
        cd terraform/global/s3-backend
        terraform init -backend-config="bucket=${{ secrets.AWS_BUCKET_NAME}}" -backend-config="key=terraform.tfstate" -backend-config="region=af-south-1"
 
  terraform_deploy:
    name: üöÄ Terraform Infrastructure Deployment
    needs: [ setup_backend]
    runs-on: ubuntu-latest
    environment: prod

    outputs:
      has_changes: ${{ steps.plan.outputs.has_changes }}
      infrastructure_exists: ${{ steps.check_infrastructure.outputs.infrastructure_exists }}
   
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
 
    - name: ‚öôÔ∏è Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.11.2
 
    - name: üîê Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: af-south-1
 
    - name: Set environment variables
      run: |
        echo "ENVIRONMENT=prod" >> $GITHUB_ENV
 
    - name: Create backend tfvars file
      run: |
        cat > terraform/environments/prod/backend.tfvars << EOF
        bucket         = "${{ secrets.TERRAFORM_STATE_BUCKET }}"
        key            = "prod/terraform.tfstate"
        region         = "af-south-1"
        dynamodb_table = "${{ secrets.TERRAFORM_LOCK_TABLE }}"
        encrypt        = true
        EOF
       
    - name: Create terraform tfvars file
      run: |
        cat > terraform/environments/prod/terraform.tfvars << EOF
        aws_region     = "af-south-1"
        project_name   = "${{ vars.PROJECT_NAME }}"
        vpc_cidr       = "${{ vars.VPC_CIDR }}"
        db_identifier  = "${{ vars.DB_IDENTIFIER }}"
        db_name        = "${{ vars.DB_NAME }}"
        db_username    = "${{ secrets.DB_USERNAME }}"
        db_password    = "${{ secrets.DB_PASSWORD }}"
        db_instance_class = "${{ vars.DB_INSTANCE_CLASS }}"
        db_engine_version = "${{ vars.DB_ENGINE_VERSION }}"
        allocated_storage = ${{ vars.ALLOCATED_STORAGE }}
        db_multi_az    = false
        db_skip_final_snapshot = true
        required_subnet_count = 2
        eb_solution_stack_name = "${{ vars.EB_SOLUTION_STACK }}"
        eb_instance_type       = "t3.micro"
        eb_min_instances       = 1
        eb_max_instances       = 2
        environment            = "prod"
        EOF
       
    - name: üèóÔ∏è Terraform Init
      run: |
        cd terraform/environments/prod
        terraform init -backend-config="bucket=${{ secrets.AWS_BUCKET_NAME}}" -backend-config="key=${{ secrets.TERRAFORM_LOCK_TABLE}}" -backend-config="region=af-south-1"
 
    - name: üîç Terraform Validate
      run: |
        cd terraform/environments/prod
        terraform validate -no-color
 
    - name: üîé Check if Infrastructure Exists
      id: check_infrastructure
      run: |
        cd terraform/environments/prod
        # More robust check for infrastructure, checking multiple resources
        if terraform state list | grep -q "module.database\|module.vpc\|module.elastic_beanstalk"; then
          echo "infrastructure_exists=true" >> $GITHUB_OUTPUT
          echo "Existing infrastructure detected ‚úÖ"
        else
          echo "infrastructure_exists=false" >> $GITHUB_OUTPUT
          echo "No existing infrastructure found ‚ùå"
        fi
 
    - name: üìù Terraform Plan
      id: plan
      run: |
        cd terraform/environments/prod
        terraform plan -var-file=terraform.tfvars -no-color -out=tfplan
        terraform show -json tfplan > plan.json
       
        CHANGES=$(jq '.resource_changes | map(select(.change.actions[] | . != "no-op")) | length' plan.json)
        if [[ $CHANGES -gt 0 ]]; then
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "Detected $CHANGES resources with changes üîÑ"
        else
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "No changes detected ‚úÖ"
        fi
 
    - name: ‚úÖ Terraform Apply
      id: apply
      if: steps.plan.outputs.has_changes == 'true'
      run: |
        cd terraform/environments/prod
        terraform apply -var-file=terraform.tfvars -auto-approve
 
    - name: üì¶ Capture Terraform Outputs
      run: |
        cd terraform/environments/prod
        DB_INSTANCE_ENDPOINT=$(terraform output -raw db_instance_endpoint)
        DB_CONNECTION_STRING=$(terraform output -raw db_connection_string)
       
        echo "DB_INSTANCE_ENDPOINT=$DB_INSTANCE_ENDPOINT" >> $GITHUB_ENV
        echo "DB_CONNECTION_STRING=$DB_CONNECTION_STRING" >> $GITHUB_ENV
   
    - name: Debug Terraform Outputs
      run: |
        echo "DB_INSTANCE_ENDPOINT=${{ env.DB_INSTANCE_ENDPOINT }}"
        echo "DB_CONNECTION_STRING=${{ env.DB_CONNECTION_STRING }}"
 
  flyway_migrations:
    name: 'Flyway Database Migrations'
    needs: terraform_deploy
    runs-on: ubuntu-latest
    environment: prod
   
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
             
    - name: üîê Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: af-south-1
 
    - name: Install Flyway
      env:
          FLYWAY_URL: jdbc:postgresql://${{ env.DB_INSTANCE_ENDPOINT }}/${{ vars.DB_NAME }}
          FLYWAY_USER: ${{ secrets.DB_USERNAME }}
          FLYWAY_PASSWORD: ${{ secrets.DB_PASSWORD }}
      run: |
        echo "Installing Flyway..."
        wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/9.20.0/flyway-commandline-9.20.0-linux-x64.tar.gz | tar xvz
        sudo ln -s $(pwd)/flyway-9.20.0/flyway /usr/local/bin/flyway
        echo "Flyway installed"
 
    - name: Run Flyway migrations
      run: |
        cd flyway
       
        # Run flyway commands with additional debugging
        echo "Running flyway info..."
        flyway info -X
       
        echo "Running flyway migrate..."
        flyway migrate -X
       
        echo "Running final flyway info..."
        flyway info
 
  deploy:
    name: Deploy
    needs: [flyway_migrations, terraform_deploy]
    runs-on: Ubuntu
 
    steps:
    - name: Checkout
      run: |
        echo "Something"
 
 
 
 