name: Terraform CI/CD

on:
  push:
    branches: [main]
    paths:
      - 'terraform/**'
      - 'db/migrations/**'
      - 'api/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  TF_VERSION: 1.11.2
  AWS_REGION: af-south-1
  ENVIRONMENT: prod
  FLYWAY_VERSION: 11.4.0
  TF_CLI_ARGS: "-no-color"
  TF_LOG: ""

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version:  ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1

      - name: Create backend configuration
        run: |
          cat > backend.hcl << EOF
          bucket         = "dry-code-snippets-bucket"
          key            = "${ENVIRONMENT}/terraform.tfstate"
          region         = "af-south-1"
          use_lockfile   = true
          encrypt        = true
          EOF

      - name: Terraform Init
        working-directory: terraform/environments/${{ env.ENVIRONMENT }}
        run: terraform init -backend-config=../../../backend.hcl

      - name: Terraform Format Check
        working-directory: terraform/environments/${{ env.ENVIRONMENT }}
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Validate
        working-directory: terraform/environments/${{ env.ENVIRONMENT }}
        run: terraform validate

      - name: Create Terraform Variables File
        working-directory: terraform/environments/${{ env.ENVIRONMENT }}
        run: |
          cat > terraform.tfvars << EOF
          db_username = "${{ secrets.DB_USERNAME }}"
          db_password = "${{ secrets.DB_PASSWORD }}"
          db_identifier = "${{ vars.DB_IDENTIFIER }}"
          db_name = "${{ vars.DB_NAME }}"
          eb_solution_stack_name = "${{ vars.EB_SOLUTION_STACK }}"
          huggingface_api_token = "${{ secrets.HUGGINGFACE_API_TOKEN }}"
          google_client_id = "${{ secrets.GOOGLE_CLIENT_ID }}"
          google_client_secret = "${{ secrets.GOOGLE_CLIENT_SECRET }}"
          google_client_url = "${{ secrets.GOOGLE_CLIENT_URL }}"
          EOF
          chmod 600 terraform.tfvars

      - name: Terraform Refresh (Update State)
        working-directory: terraform/environments/${{ env.ENVIRONMENT }}
        run: terraform refresh -var-file=terraform.tfvars

      - name: Terraform Plan
        id: plan
        working-directory: terraform/environments/${{ env.ENVIRONMENT }}
        run: |
          terraform plan -input=false -var-file=terraform.tfvars -out=tfplan

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        working-directory: terraform/environments/prod
        run: |
          terraform apply -auto-approve tfplan

  database-migrations:
    name: Flyway Database Migrations
    needs: terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Flyway
        run: |
          wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/${FLYWAY_VERSION}/flyway-commandline-${FLYWAY_VERSION}-linux-x64.tar.gz | tar xvz
          sudo ln -s $(pwd)/flyway-${FLYWAY_VERSION}/flyway /usr/local/bin/flyway

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1

      - name: Wait for RDS Availability
        run: |
          until aws rds describe-db-instances --db-instance-identifier ${{ vars.DB_IDENTIFIER }} --query 'DBInstances[0].DBInstanceStatus' --output text | grep -q "available"; do
            echo "Waiting for RDS to be available..."
            sleep 30
          done

      - name: Get RDS Endpoint
        id: get-endpoint
        run: |
          ENDPOINT=$(aws rds describe-db-instances --db-instance-identifier ${{ vars.DB_IDENTIFIER }} --query 'DBInstances[0].Endpoint.Address' --output text)
          echo "RDS_ENDPOINT=$ENDPOINT" >> $GITHUB_ENV

      - name: Run Flyway Migrations
        working-directory: ./db/migrations
        run: |
          # Create Flyway config file
          cat > flyway.conf << EOF
          flyway.url=jdbc:postgresql://${RDS_ENDPOINT}/${{ vars.DB_NAME }}
          flyway.user=${{ secrets.DB_USERNAME }}
          flyway.password=${{ secrets.DB_PASSWORD }}
          flyway.locations=filesystem:./sql
          flyway.baselineOnMigrate=true
          flyway.schemas=public
          EOF
          chmod 600 flyway.conf
          
          # Run migrations
          flyway info
          flyway migrate
          flyway info

      - name: Migration Status Summary
        run: |
          echo "Database migration completed"
  
  test-api:
    name: Build and Test API
    runs-on: ubuntu-latest
    needs: database-migrations

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: maven-

  build-jar:
    name: Build JAR
    runs-on: ubuntu-latest
    needs: test-api

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: maven-

      - name: Build API JAR
        working-directory: ./api
        run: mvn clean package -DskipTests

      - name: Build CLI JAR
        working-directory: ./cli
        run: mvn clean package -DskipTests

      - name: Prepare API Package
        working-directory: ./api
        run: |
          mkdir -p deploy
          cp target/*.jar deploy/application.jar
          cd deploy
          zip -r application.zip application.jar
      
      - name: Prepare CLI Package
        working-directory: ./cli
        run: |
          mkdir -p deploy
          cp target/cli-1.0-SNAPSHOT.jar deploy/application.jar
          cd deploy
          zip -r application.zip application.jar

      - name: Upload API Artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-zip
          path: ./api/deploy/application.zip

      - name: Upload CLI Artifact
        uses: actions/upload-artifact@v4
        with:
          name: cli-zip
          path: ./cli/deploy/application.zip

  release:
    name: Update GitHub Release
    runs-on: ubuntu-latest
    needs: build-jar  

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download CLI Artifact
        uses: actions/download-artifact@v4
        with:
          name: cli-zip
          path: cli/deploy

      - name: Update GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.RELEASE_TAG_TOKEN }}
          tag_name: latest-release  
          name: "DRY Snippets Latest Release"
          body: "This release includes both CLI updates."
          draft: false
          prerelease: false
          files: cli/deploy/application.zip

  deploy:
    name: Deploy to Elastic Beanstalk
    runs-on: ubuntu-latest
    needs: build-jar

    steps:
      - name: Download Built Artifact
        uses: actions/download-artifact@v4
        with:
          name: application-zip
          path: deploy

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1

      - name: Get Beanstalk Environment Name
        run: |
          ENV_NAME=$(aws elasticbeanstalk describe-environments \
            --application-name ${{ vars.AWS_EB_APP_NAME }} \
            --query "Environments[0].EnvironmentName" --output text)
          echo "ENV_NAME=$ENV_NAME" >> $GITHUB_ENV

      - name: Deploy to Elastic Beanstalk
        run: |
          VERSION_LABEL="v-$(date +%Y%m%d-%H%M%S)"
    
          aws s3 cp deploy/application.zip s3://dry-code-snippets-bucket/\
          ${{ vars.AWS_EB_APP_NAME }}/$VERSION_LABEL/application.zip
          
          aws elasticbeanstalk create-application-version \
          --application-name ${{ vars.AWS_EB_APP_NAME }} \
          --version-label "$VERSION_LABEL" \
          --source-bundle S3Bucket=dry-code-snippets-bucket,S3Key="${{ vars.AWS_EB_APP_NAME }}/$VERSION_LABEL/application.zip" \
          
          aws elasticbeanstalk update-environment \
          --environment-name $ENV_NAME \
          --version-label "$VERSION_LABEL" \
          --application-name ${{ vars.AWS_EB_APP_NAME }}

  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1

      - name: Wait for Environment to be Ready
        run: |
          MAX_ATTEMPTS=30
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]
          do
            STATUS=$(aws elasticbeanstalk describe-environments \
              --environment-names ${{ env.ENV_NAME }} \
              --query "Environments[0].Status" --output text)
          
            HEALTH=$(aws elasticbeanstalk describe-environments \
              --environment-names ${{ env.ENV_NAME }} \
              --query "Environments[0].Health" --output text)
          
            echo "Environment Status: $STATUS, Health: $HEALTH"
          
            if [ "$STATUS" = "Ready" ] && [ "$HEALTH" = "Green" ]; then
              echo "✅ Deployment successful!"
              break
            elif [ "$STATUS" = "Ready" ] && [ "$HEALTH" = "Red" ]; then
              echo "❌ Deployment failed - environment is unhealthy"
              exit 1
            fi
          
            ATTEMPT=$((ATTEMPT+1))
            echo "Waiting for deployment to complete... ($ATTEMPT/$MAX_ATTEMPTS)"
            sleep 30
          done
          
          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "❌ Deployment verification timed out"
            exit 1
          fi
