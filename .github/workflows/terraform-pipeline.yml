name: Terraform CI/CD

on:
  push:
    branches: [main]
    paths:
      - 'terraform/**'
      - 'db/migrations/**'
      - 'api/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  TF_VERSION: 1.11.2
  AWS_REGION: af-south-1
  ENVIRONMENT: prod
  FLYWAY_VERSION: 11.4.0
  TF_CLI_ARGS: "-no-color"
  TF_LOG: ""

jobs:
  database-migrations:
    name: Flyway Database Migrations
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Flyway
        run: |
          wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/${FLYWAY_VERSION}/flyway-commandline-${FLYWAY_VERSION}-linux-x64.tar.gz | tar xvz
          sudo ln -s $(pwd)/flyway-${FLYWAY_VERSION}/flyway /usr/local/bin/flyway

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1

      - name: Wait for RDS Availability
        run: |
          until aws rds describe-db-instances --db-instance-identifier ${{ vars.DB_IDENTIFIER }} --query 'DBInstances[0].DBInstanceStatus' --output text | grep -q "available"; do
            echo "Waiting for RDS to be available..."
            sleep 30
          done

      - name: Get RDS Endpoint
        id: get-endpoint
        run: |
          ENDPOINT=$(aws rds describe-db-instances --db-instance-identifier ${{ vars.DB_IDENTIFIER }} --query 'DBInstances[0].Endpoint.Address' --output text)
          echo "RDS_ENDPOINT=$ENDPOINT" >> $GITHUB_ENV

      - name: Run Flyway Migrations
        working-directory: ./db/migrations
        run: |
          # Create Flyway config file
          cat > flyway.conf << EOF
          flyway.url=jdbc:postgresql://${RDS_ENDPOINT}/${{ vars.DB_NAME }}
          flyway.user=${{ secrets.DB_USERNAME }}
          flyway.password=${{ secrets.DB_PASSWORD }}
          flyway.locations=filesystem:./sql
          flyway.baselineOnMigrate=true
          flyway.schemas=public
          flyway.cleanDisabled=false
          EOF
          chmod 600 flyway.conf
          
          # Run migrations
          flyway info
          flyway clean
          flyway info
          flyway migrate
          flyway info

      - name: Migration Status Summary
        run: |
          echo "Database migration completed"
  
  