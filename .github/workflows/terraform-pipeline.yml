name: Terraform CI/CD

on:
  push:
    branches: [main, peo/depoly-java]
  pull_request:
    branches: [main]
  workflow_dispatch:  

env:
  TF_VERSION: 1.11.2
  AWS_REGION: af-south-1
  ENVIRONMENT: prod
  FLYWAY_VERSION: 11.4.0

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1

      - name: Create backend configuration
        run: |
          cat > backend.hcl << EOF
          bucket         = "dry-code-snippets-bucket"
          key            = "${ENVIRONMENT}/terraform.tfstate"
          region         = "af-south-1"
          use_lockfile   = true
          encrypt        = true
          EOF

      - name: Terraform Init
        working-directory: terraform/environments/${{ env.ENVIRONMENT }}
        run: terraform init -backend-config=../../../backend.hcl

      - name: Terraform Format Check
        working-directory: terraform/environments/${{ env.ENVIRONMENT }}
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Validate
        working-directory: terraform/environments/${{ env.ENVIRONMENT }}
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: terraform/environments/${{ env.ENVIRONMENT }}
        run: |
          export TF_VAR_db_username=${{ secrets.DB_USERNAME }}
          export TF_VAR_db_password=${{ secrets.DB_PASSWORD }}
          export TF_VAR_db_identifier=${{ vars.DB_IDENTIFIER }}
          export TF_VAR_db_name=${{ vars.DB_NAME }}
          export TF_VAR_eb_solution_stack_name="${{ vars.EB_SOLUTION_STACK }}"
          
          terraform plan -no-color -input=false -out=tfplan
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        working-directory: terraform/environments/prod
        run: |
          export TF_VAR_db_username=${{ secrets.DB_USERNAME }}
          export TF_VAR_db_password=${{ secrets.DB_PASSWORD }}
          export TF_VAR_db_identifier=${{ vars.DB_IDENTIFIER }}
          export TF_VAR_db_name=${{ vars.DB_NAME }}
          export TF_VAR_eb_solution_stack_name=${{ vars.EB_SOLUTION_STACK_NAME }}
          
          terraform apply -auto-approve tfplan

  database-migrations:
    name: Flyway Database Migrations
    needs: terraform
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Flyway
        run: |
          wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/${FLYWAY_VERSION}/flyway-commandline-${FLYWAY_VERSION}-linux-x64.tar.gz | tar xvz
          sudo ln -s $(pwd)/flyway-${FLYWAY_VERSION}/flyway /usr/local/bin/flyway
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1

      - name: üìç Get RDS Endpoint
        id: get-endpoint
        run: |
          ENDPOINT=$(aws rds describe-db-instances --db-instance-identifier ${{ vars.DB_IDENTIFIER }} --query 'DBInstances[0].Endpoint.Address' --output text)
          echo "RDS_ENDPOINT=$ENDPOINT" >> $GITHUB_ENV
      
      - name: Run Flyway Migrations
        working-directory: ./db/migrations
        run: |          
          # Create Flyway config file
          cat > flyway.conf << EOF
          flyway.url=jdbc:postgresql://${RDS_ENDPOINT}/${{ vars.DB_NAME }}
          flyway.user=${{ secrets.DB_USERNAME }}
          flyway.password=${{ secrets.DB_PASSWORD }}
          flyway.locations=filesystem:./sql
          flyway.baselineOnMigrate=true
          flyway.schemas=public
          EOF
          
          # Run migrations
          flyway info
          flyway migrate
          flyway info
        
      - name: Migration Status Summary
        run: |
          echo "Database migration completed"

  test-api:
    name: Build and Test API
    needs: database-migrations
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: maven-

      - name: Run Tests
        run: mvn clean test

  build-jar:
    name: Build JAR
    runs-on: ubuntu-latest
    needs: test-api

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: maven-

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Prepare Deployment Package
        run: |
          mkdir -p deploy
          cp target/*.jar deploy/application.jar
          cd deploy
          zip -r application.zip application.jar

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: application-zip
          path: deploy/application.zip

  deploy:
    name: Deploy to Elastic Beanstalk
    runs-on: ubuntu-latest
    needs: build-jar

    steps:
      - name: Download Built Artifact
        uses: actions/download-artifact@v3
        with:
          name: application-zip
          path: deploy

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1

      - name: Get Beanstalk Environment Name
        run: |
          ENV_NAME=$(aws elasticbeanstalk describe-environments \
            --application-name ${{ vars.AWS_EB_APP_NAME }} \
            --query "Environments[0].EnvironmentName" --output text)
          echo "ENV_NAME=$ENV_NAME" >> $GITHUB_ENV

      - name: Deploy to Elastic Beanstalk
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name $ENV_NAME \
            --application-name ${{ vars.AWS_EB_APP_NAME }}
  verify-deployment:
  name: Verify Deployment
  runs-on: ubuntu-latest
  needs: deploy

  steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: af-south-1

    - name: Wait for Environment to be Ready
      run: |
        MAX_ATTEMPTS=30
        ATTEMPT=0
        
        while [ $ATTEMPT -lt $MAX_ATTEMPTS ]
        do
          STATUS=$(aws elasticbeanstalk describe-environments \
            --environment-names ${{ env.ENV_NAME }} \
            --query "Environments[0].Status" --output text)
        
          HEALTH=$(aws elasticbeanstalk describe-environments \
            --environment-names ${{ env.ENV_NAME }} \
            --query "Environments[0].Health" --output text)
        
          echo "Environment Status: $STATUS, Health: $HEALTH"
        
          if [ "$STATUS" = "Ready" ] && [ "$HEALTH" = "Green" ]; then
            echo "‚úÖ Deployment successful!"
            break
          elif [ "$STATUS" = "Ready" ] && [ "$HEALTH" = "Red" ]; then
            echo "‚ùå Deployment failed - environment is unhealthy"
            exit 1
          fi
        
          ATTEMPT=$((ATTEMPT+1))
          echo "Waiting for deployment to complete... ($ATTEMPT/$MAX_ATTEMPTS)"
          sleep 30
        done
        
        if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
          echo "‚ùå Deployment verification timed out"
          exit 1
        fi

    - name: Health Check API
      run: |
        EB_URL=$(aws elasticbeanstalk describe-environments \
          --environment-names ${{ env.ENV_NAME }} \
          --query "Environments[0].CNAME" --output text)
        
        # Adjust the health endpoint to match your application
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://$EB_URL/health || echo "Failed")
        
        echo "Health check status: $HTTP_STATUS"
        
        if [ "$HTTP_STATUS" = "200" ]; then
          echo "‚úÖ API health check passed"
        else
          echo "‚ùå API health check failed"
          exit 1
        fi

    - name: Log Recent Events
      if: always()
      run: |
        echo "Recent environment events:"
        aws elasticbeanstalk describe-events \
          --environment-name $ENV_NAME \
          --max-items 10
