name: Terraform and Database Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    
    # Use the Bash shell regardless of runner platform
    defaults:
      run:
        shell: bash
        
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.0
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Terraform Init
      run: |
        cd terraform/environments/dev
        terraform init
      
    - name: Terraform Format
      run: |
        cd terraform/environments/dev
        terraform fmt -check -recursive
      
    - name: Terraform Plan
      id: plan
      run: |
        cd terraform/environments/dev
        terraform plan -var-file=terraform.tfvars -no-color
      continue-on-error: true
    
    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style ðŸ–Œ\`${{ steps.fmt.outcome }}\`
          #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
          <details><summary>Show Plan</summary>
          
          \`\`\`terraform
          ${process.env.PLAN}
          \`\`\`
          
          </details>`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        cd terraform/environments/dev
        terraform apply -var-file=terraform.tfvars -auto-approve
  
  database-migrations:
    name: 'Database Migrations'
    runs-on: ubuntu-latest
    needs: terraform
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.0
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Setup Flyway
      run: |
        wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/9.8.1/flyway-commandline-9.8.1-linux-x64.tar.gz | tar -xvz
        sudo ln -s $(pwd)/flyway-9.8.1/flyway /usr/local/bin/flyway
    
    - name: Terraform Init
      run: |
        cd terraform/environments/dev
        terraform init
    
    - name: Run Database Migrations
      run: |
        cd terraform/environments/dev
        export DB_ENDPOINT=$(terraform output -raw db_instance_endpoint)
        export DB_NAME=$(terraform output -raw db_name)
        export DB_HOST=$(echo "${DB_ENDPOINT}" | cut -d':' -f1)
        export DB_PORT=$(echo "${DB_ENDPOINT}" | cut -d':' -f2)
        
        # Create temporary Flyway configuration
        TEMP_CONF=$(mktemp)
        cat ../../flyway/conf/flyway.conf > "${TEMP_CONF}"
        cat ../../flyway/conf/flyway-dev.conf >> "${TEMP_CONF}"
        echo "flyway.url=jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}" >> "${TEMP_CONF}"
        echo "flyway.user=${{ secrets.DB_USERNAME }}" >> "${TEMP_CONF}"
        echo "flyway.password=${{ secrets.DB_PASSWORD }}" >> "${TEMP_CONF}"
        
        # Run Flyway migrations
        flyway -configFiles="${TEMP_CONF}" migrate